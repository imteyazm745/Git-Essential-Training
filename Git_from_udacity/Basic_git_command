git --version : this command is use to check git is already installed or not it will give the git version.
git config user.email : This command will check which account is currently logged in to Git.
git config --global --list : This will show a list of all the identities configured on your system, including username and email address.
git config --global --unset user.email : If someone else identity is listed in the output, you can remove it by running this comman.

Once you have removed your brother's identity, you can add your own identity by running the following commands:
git config --global user.email "your-email-address"
git config --global user.name "your-username"

Finally, you can check that your identity has been set correctly by running the following command:
git config --global --list

CREATE A GIT REPO
Three GIT commands are : 
Git init : We can create brand new repositories (repos) on our computer.
git clone : Copy existing repos from womewhere else to our local computer.
git status : Check the status of a repo.

$ git init
Running this command creates a hidden .git directory. This .git directory is the brain/storage center for the repository. 
It holds all of the configuration files and directories and is where all of the commits are stored.

$ git clone : $ git clone <path-to-repository-to-clone>
This command :     
    takes the path to an existing repository
    by default will create a directory with the same name as the repository that's being cloned
    can be given a second argument that will be used as the name of the directory
    will create the new repository inside of the current working directory

$ git status : 
The git status is our key to the mind of Git. It will tell us what Git is thinking and the state of our repository as Git sees it. 

Git Status Explanation
As you can see in the GIF above, running git status in the course-git-blog-project project produces the following output:

On branch master
Your branch is up-to-date with 'origin/master'.
nothing to commit, working directory clean

The output tells us two things:

1. On branch master ‚Äì this tells us that Git is on the master branch. You've got a description of a branch on your terms sheet 
so this is the "master" branch (which is the default branch). We'll be looking more at branches in lesson 5

2. Your branch is up-to-date with 'origin/master'. ‚Äì Because git clone was used to copy this repository from another computer, 
this is telling us if our project is in sync with the one we copied from. 
We won't be dealing with the project on the other computer,so this line can be ignored.

3. nothing to commit, working directory clean ‚Äì this is saying that there are no pending changes.

The tools we'll be using to review a repository's history are git log and git show.

git log : Displays informatiln about the existing commits.
git show : Displays information about the given commit.

Navigating The Log
If you're not used to a pager on the command line, navigating in Less can be a bit odd. Here are some helpful keys:

to scroll down, press
j or ‚Üì to move down one line at a time
d to move by half the page screen
f to move by a whole page screen
to scroll up, press
k or ‚Üë to move up one line at a time
u to move by half the page screen
b to move by a whole page screen
press q to quit out of the log (returns to the regular command prompt)


$ git log --oneline : the --oneline flag is used to alter how git log displays information:
This command:
    lists one commit per line
    shows the first 7 characters of the commit's SHA
    shows the commit's message
 
git log --stat : To recap, the --stat flag is used to alter how git log displays information:

$ git log --stat
This command:
    displays the file(s) that have been modified
    displays the number of lines that have been added/removed
    displays a summary line with the total number of modified files and lines that have been added/removed

Viewing Changes
We know that git log will show us the commits in a repository, and if we add the --stat flag, 
we can see what files were modified and how many lines of code were added or removed.

git log -p
The git log command has a flag that can be used to display the actual changes made to a file. 
The flag is --patch which can be shortened to just -p:

Annotated git log -p Output
Using the image above, let's do a quick recap of the git log -p output:

üîµ - the file that is being displayed
üî∂ - the hash of the first version of the file and the hash of the second version of the file
not usually important, so it's safe to ignore
‚ù§Ô∏è - the old version and current version of the file
üîç - the lines where the file is added and how many lines there are
-15,83 indicates that the old version (represented by the -) started at line 15 and that the file had 83 lines
+15,85 indicates that the current version (represented by the +) starts at line 15 and that there are now 85 lines...these 85 lines are shown in the patch below
‚úèÔ∏è - the actual changes made in the commit
lines that are red and start with a minus (-) were in the original version of the file but have been removed by the commit
lines that are green and start with a plus (+) are new lines that have been added in the commit

$ git log -p --stat : you can combine flags! git log -p --stat will display the stats info above the patch info. 
Actually, the order doesn't matter; git log --stat -p will also show the stats info above the patch info.

git log -p -w : will show the patch information, but will not highlight lines where only whitespace changes have occurred.

Viewing A Specific Commit
Too Much Scrolling : The last few quizzes in the previous section had you scrolling and scrolling 
through the patch output just to get to the right commit so you could see its info. 
Wouldn't it be super handy if you could just display a specific commit's details without worrying about all of the others in the repo?

There are actually two ways to do this!

providing the SHA of the commit you want to see to git log
use a new command git show

But did you know, you can supply the SHA of a commit as the final argument for all of these commands? For example:

$ git log -p fdf5493 : By supplying a SHA, the git log -p command will start at that commit! 
No need to scroll through everything! Keep in mind that it will also show all of the commits that were made prior to the supplied SHA.

New Command: git show
The other command that shows a specific commit is git show:

$ git show : Running it like the example above will only display the most recent commit. Typically, a SHA is provided as a final argument:

$ git show fdf5493
What does git show do?
The git show command will show only one commit. So don't get alarmed when you can't find any other commits - 
it only shows one. The output of the git show command is exactly the same as the git log -p command. So by default, git show displays:

    the commit
    the author
    the date
    the commit message
    the patch information
However, git show can be combined with most of the other flags we've looked at:

--stat - to show the how many files were changed and the number of lines that were added/removed
-p or --patch - this the default, but if --stat is used, the patch won't display, so pass -p to add it again
-w - to ignore changes to whitespace

Add commits to a repo:
git add: add files from the working directory to the staging index
git commit: Takes files from the staging index and saves them in the index
git diff: displays the difference between two versions of file, its output is exactly like the output of the git log -p command.

irfan@irfan-Inspiron-5558:~/udacity_git_course/new-git-project$ ls
course-git-blog-project  css  index.html  js
irfan@irfan-Inspiron-5558:~/udacity_git_course/new-git-project$ git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
	new file:   course-git-blog-project
	new file:   css/app.css
	new file:   index.html
	new file:   js/app.js

Let's do a quick review of what's going on and what we're about to do:
	we have some new files that we want Git to start tracking
	for Git to track a file, it needs to be committed to the repository
	for a file to be committed, it needs to be in the Staging Index
	the git add command is used to move files from the Working Directory to the Staging Index
	there are currently three, untracked files in the Working Directory
	index.html
	app.css in the css directory
	app.js in the js directory
So the first step to getting any files committed to the repository is to add them from the Working Directory to the Staging Index. 
We will be using the git add command to move all three of these files to the Staging Index.

Staging Files
Alrighty, it's go time! Run the following command on the Terminal which uses git add to add index.html to the Staging Index:
			$ git add index.html
Note - we are only adding the index.html file. We'll add the CSS and JavaScript files in just a second.

Stage Remaining Files
The index.html file has been staged. Let's stage the other two files. Now we could run the following:

$ git add css/app.css js/app.js
...but that's a lot of extra typing. We could use a special command line character to help:

The Period "."
The period refers to the current directory and can be used as a shortcut to refer to all files and directories (including all nested files and directories!).

	$ git add css/app.css js/app.js
	# would become
	$ git add .


Git Add Recap : The git add command is used to move files from the Working Directory to the Staging Index.
	$ git add <file1> <file2> ‚Ä¶ <fileN>
This command:
	takes a space-separated list of file names
	alternatively, the period . can be used in place of a list of files to tell Git to add the current directory (and all nested files)

Git Commit: 
Make A Commit
Ok, let's do it!
To make a commit in Git you use the git commit command, but don't run it just yet. Running this command will open the code editor that you configured
	$ git config --global core.editor <your-editor's-config-went-here>

Git Commit Recap : The git commit command takes files from the Staging Index and saves them in the repository.

$ git commit
This command:

will open the code editor that is specified in your configuration
(check out the Git configuration step from the first lesson to configure your editor)
Inside the code editor:

a commit message must be supplied
lines that start with a # are comments and will not be recorded
save the file after adding a commit message
close the editor to make the commit
Then, use git log to review the commit you just made!

Commit Messages
Good Commit Messages
Let's take a quick stroll down Stickler Lane and ask the question:

Do:
	do keep the message short (less than 60-ish characters)
	do explain what the commit does (not how or why!)

Do not:
	do not explain why the changes are made (more on this below)
	do not explain how the changes are made (that's what git log -p is for!)
	do not use the word "and"
	if you have to use "and", your commit message is probably doing too many changes - break the changes into separate commits
	e.g. "make the background color pink and increase the size of the sidebar"

$ git diff : The git diff command can be used to see changes that have been made but haven't been committed, yet.

